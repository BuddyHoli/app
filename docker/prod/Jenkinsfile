def kubectlImage = "artifactory.wikia-inc.com/ops/k8s-deployer:0.0.15"
def nginxImage = "artifactory.wikia-inc.com/sus/mediawiki-prod-nginx"
def mediawikiImage = "artifactory.wikia-inc.com/sus/mediawiki-prod-php"
def loggerImage = "artifactory.wikia-inc.com/sus/mediawiki-logger"

def rolloutStatusSjc = 1
def rolloutStatusRes = 1

def slackChannel = "#mw-prod-deployment"

def render(String template, java.util.LinkedHashMap binding) {
    def engine = new groovy.text.SimpleTemplateEngine()

    return engine.createTemplate(template).make(binding).toString()
}

def messageDetails(int rolloutStatus) {
    if (rolloutStatus != 0) {
        return [
            emoji: ":siren:",
            color: "#cc142c"
        ]
    } else {
        return [
            emoji: ":checkmark:",
            color: "#36a64f"
        ]
    }
}

node("docker-daemon") {
    def appBranch = params.app.split('\\.')[0]
    def configBranch = params.config.split('\\.')[0]

    def appHash
    def configHash
    def imageExists = false
    def imageTag

    def buildUser = "Anonymous"

    stage("Clone repositories") {
        wrap([$class: 'BuildUser']) {
            try {
                buildUser = "${BUILD_USER}"
            } catch (MissingPropertyException ex) {
                buildUser = "Jenkins"
            }
        }
        dir("app") {
            git url: "git@github.com:Wikia/app.git",
                branch: appBranch,
                credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

            appHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            println("Wikia/app commit: $appHash")
        }

        dir("config") {
            git url: "git@github.com:Wikia/config.git",
                branch: configBranch,
                credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

            configHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            println("Wikia/config commit: $configHash")
        }

        imageTag = "$appHash.$configHash"

        println("Image tag: $imageTag")
        println("App Version: $params.app")
        println("Config Version: $params.config")
    }

    stage("Bump cachebuster and version") {
        dir("app") {
            sh('echo "<?php\n\\\$wgStyleVersion = ' + params.cache_buster + ';" > wgStyleVersion.php')
            sh('echo "' + appBranch + '@' + appHash + '" > wikia.version.txt')
        }

        dir("config") {
            sh('echo "' + configBranch + '@' + configHash + '" > wikia.version.txt')
        }
    }

    stage("Build and push images") {
        dir("app") {
            def status = sh(script: """
                curl -u ${env.JENKINS_ARTIFACTORY_USERNAME}:${env.JENKINS_ARTIFACTORY_PASSWORD} \
                -w "%{http_code}" -s -I -o /dev/null \
                -XGET "https://artifactory.wikia-inc.com/artifactory/api/storage/dockerv2-local/sus/mediawiki-prod-php/${imageTag}"
            """, returnStdout: true).trim()

            if (status == "200") {
                imageExists = true
            }

            if (!imageExists) {
                sh("docker pull artifactory.wikia-inc.com/sus/php-wikia-base:eb11f0c")

                // SUS-5284 - make the image a bit smaller
                sh("cp docker/.dockerignore ..")

                sh("docker build  . -f docker/prod/Dockerfile-nginx -t $nginxImage:$imageTag")
                sh("docker build .. -f docker/prod/Dockerfile-php -t $mediawikiImage:$imageTag")

                sh("docker push $nginxImage:$imageTag")
                sh("docker push $mediawikiImage:$imageTag")
            } else {
                println("Image tag ($imageTag) already exists")
            }
        }
    }

    stage('Notify Slack Channel publish') {
        sh "curl -X POST -H 'Content-type: application/json' --data '{ \"text\": \"MediaWiki with app branch <https://github.com/Wikia/app/tree/'${appBranch}'|'${appBranch}'> and config branch <https://github.com/Wikia/config/tree/'${configBranch}'|'${configBranch}'> is published by '${buildUser}'\", \"channel\": \"'${slackChannel}'\" }' '${env.MW_SANDBOX_K8S_WEBHOOK}'"
    }

    stage("Apply new k8s descriptor") {
        dir("app") {
            def template = sh(script: 'cat docker/prod/prod.template.yaml', returnStdout: true)
            def sjc = render(template, [
                'IMAGE_TAG': imageTag,
                'DATACENTER': 'sjc',
                'APP_VERSION': params.app,
                'CONFIG_VERSION': params.config
            ])

            sh("""cat > docker/prod/sjc.yaml <<EOL
${sjc}
EOL""")

            def res = render(template, [
                'IMAGE_TAG': imageTag,
                'DATACENTER': 'res',
                'APP_VERSION': params.app,
                'CONFIG_VERSION': params.config
            ])

            sh("""cat > docker/prod/res.yaml <<EOL
${res}
EOL""")
        }

        withDockerContainer(kubectlImage) {
            // deploy to SJC
            sh "kubectl --context kube-sjc-prod -n prod apply -f app/docker/prod/sjc.yaml"
            rolloutStatusSjc = sh(returnStatus: true, script: "kubectl --context kube-sjc-prod -n prod rollout status deployment/mediawiki-prod")
            // deploy to RES
            sh "kubectl --context kube-res-prod -n prod apply -f app/docker/prod/res.yaml"
            rolloutStatusRes = sh(returnStatus: true, script: "kubectl --context kube-res-prod -n prod rollout status deployment/mediawiki-prod")
        }
    }

    stage("Apply cron jobs") {
        dir("app") {
            // SUS-5531 - apply cron jobs via auto-generated YAML file
            sh("cd docker/maintenance && bash cronjobs-generator.sh ${imageTag} > ../prod/k8s-cronjobs.yaml")
            sh("cat docker/prod/k8s-cronjobs.yaml")
        }

        withDockerContainer(kubectlImage) {
            // cron jobs only run on SJC
            sh "kubectl --context kube-sjc-prod -n prod apply -f app/docker/prod/k8s-cronjobs.yaml"
        }
    }

    stage("Set and report job status") {
        if (rolloutStatusSjc != 0 || rolloutStatusRes != 0) {
            currentBuild.result = "UNSTABLE"
        }

        sjcMsg = messageDetails(rolloutStatusSjc)
        sh "curl -X POST -H 'Content-type: application/json' --data '{ \"mrkdwn_in\": [\"pretext\", \"text\"], \"color\": \"${sjcMsg['color']}\", \"pretext\": \"${sjcMsg['emoji']} MediaWiki rollout status\", \"channel\": \"${slackChannel}\", \"fields\": [ {\"title\": \"environment\", \"value\": \"prod\", \"short\": true }, {\"title\": \"datacenter\", \"value\": \"sjc\", \"short\": true } ] }' ${env.MW_SANDBOX_K8S_WEBHOOK}"

        resMsg = messageDetails(rolloutStatusRes)
        sh "curl -X POST -H 'Content-type: application/json' --data '{ \"mrkdwn_in\": [\"pretext\", \"text\"], \"color\": \"${resMsg['color']}\", \"pretext\": \"${resMsg['emoji']} MediaWiki rollout status\", \"channel\": \"${slackChannel}\", \"fields\": [ {\"title\": \"environment\", \"value\": \"prod\", \"short\": true }, {\"title\": \"datacenter\", \"value\": \"res\", \"short\": true } ] }' ${env.MW_SANDBOX_K8S_WEBHOOK}"
    }
}
